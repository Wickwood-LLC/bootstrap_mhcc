<?php

use \Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FormatterBase;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Session\AnonymousUserSession;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Template\AttributeHelper;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;

/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 *
 * @param $variables
 */

function bootstrap_mhcc_preprocess_html(&$variables) {
	$node = Drupal::routeMatch()->getParameter('node');
	if ($node instanceof NodeInterface) {
	  // You can get nid and anything else you need from the node object.
	  $variables['is_published'] = $node->isPublished();
  }
  if (!empty($variables['head_title']['name'])) {
    $variables['head_title']['name'] = html_entity_decode($variables['head_title']['name']);
  }
}

/**
 * @param $variables
 */
function bootstrap_mhcc_preprocess_page(&$variables) {
  $variables['site_name'] = Markup::create(strip_tags(html_entity_decode(Drupal::config('system.site')->get('name'))));
}

/**
 * @param $variables
 */
function bootstrap_mhcc_preprocess_maintenance_page(&$variables) {
  $variables['site_name'] = Markup::create(strip_tags(html_entity_decode(Drupal::config('system.site')->get('name'))));
}

/**
 * @param array $texts
 */
function bootstrap_mhcc_bootstrap_colorize_text_alter(array &$texts) {
  $texts['matches'][t('Apply')->render()] = 'success';
}

/**
 * Helper function to return the currently loaded entity from the URL (controller).
 * Returns NULL if the currently loaded page is no entity.
 *
 * @return \Drupal\Core\Entity\EntityInterface
 */
function _get_current_controller_entity()
{
  $currentRouteParameters = \Drupal::routeMatch()->getParameters();
  foreach ($currentRouteParameters as $param) {
    if ($param instanceof \Drupal\Core\Entity\EntityInterface) {
      return $param;
    }
  }
  return NULL;
}

/**
 * Prepares variables for username templates.
 *
 * Default template: username.html.twig.
 *
 * Modules that make any changes to variables like 'name' or 'extra' must ensure
 * that the final string is safe.
 *
 * Implements template_preprocess_username()
 *
 * @param array $variables
 *   An associative array containing:
 *   - account: The user account (\Drupal\Core\Session\AccountInterface).
 */
function bootstrap_mhcc_preprocess_username(&$variables) {
  $entity = _get_current_controller_entity();
  $label = ($entity->getFieldDefinition('uid')->getLabel());
  $account = $variables['account'] ?: new AnonymousUserSession();
//  $item = \Drupal\Core\Field\FieldItemInterface::propertyDefinitions($entity->getFieldDefinition('uid'));
//  kint($item);
//  $field = FormatterInterface::viewElements($entity, 'en');

  // Creating variables for the template.
  $variables['entity_type'] = $entity->getEntityTypeId();
  $variables['field_name'] = $entity->get('uid')->getName();
  $variables['field_type'] = $entity->getFieldDefinition('uid')->getType();
//  $variables['label_display'] = 'inline';
//  $variables['label_hidden'] = $variables['label_display'] === 'hidden';
  $variables['label_tag'] = 'div';
  $variables['field_wrapper_tag'] = 'div';
  $variables['field_item_wrapper_tag'] = 'div';

  // Always set the field label - allow themes to decide whether to display it.
  // In addition the label should be rendered but hidden to support screen n
  // readers.
  $variables['label'] = $label;
  static $default_attributes;
  if (!isset($default_attributes)) {
    $default_attributes = new Attribute();
  }

  $external = FALSE;
  if ($variables['uid'] && $variables['profile_access']) {
    // We are linking to a local user.
    $variables['attributes']['title'] = t('Contact Author');
  }
  elseif (!empty($account->homepage)) {
    $external = TRUE;
  }

  // We have a link path, so we should generate a URL.
  if (isset($variables['link_path'])) {
    if ($external) {
      $variables['attributes']['href'] = Url::fromUri($variables['link_path'], $variables['link_options'])
        ->toString();
    }
    else {
      $variables['attributes']['href'] = '/' . Url::fromRoute('entity.user.canonical', [
        'user' => $variables['uid'],
      ])->getInternalPath() . '/contact';
    }
    $variables['attributes']['target'] = '_blank';
  }

//  kint($variables);

}

/**
 * Prepares variables for field templates.
 *
 * Default template: field.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: A render element representing the field.
 *   - attributes: A string containing the attributes for the wrapping div.
 *   - title_attributes: A string containing the attributes for the title.
 * @param $hook
 */
function bootstrap_mhcc_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];

  // Creating variables for the template.
  $variables['entity_type'] = $element['#entity_type'];
  $variables['field_name'] = $element['#field_name'];
  $variables['field_type'] = $element['#field_type'];
  $variables['label_display'] = $element['#label_display'];
  $variables['label_hidden'] = $element['#label_display'] === 'hidden';

  // Always set the field label - allow themes to decide whether to display it.
  // In addition the label should be rendered but hidden to support screen
  // readers.
  $variables['label'] = $element['#title'];
  $variables['multiple'] = $element['#is_multiple'];
  static $default_attributes;
  if (!isset($default_attributes)) {
    $default_attributes = new Attribute();
  }

  // Merge attributes when a single-value field has a hidden label.
  if ($element['#label_display'] === 'hidden' && !$variables['multiple'] && !empty($element['#items'][0]->_attributes)) {
    $variables['attributes'] = AttributeHelper::mergeCollections($variables['attributes'], (array) $element['#items'][0]->_attributes);
  }

  // We want other preprocess functions and the theme implementation to have
  // fast access to the field item render arrays. The item render array keys
  // (deltas) should always be numerically indexed starting from 0, and looping
  // on those keys is faster than calling Element::children() or looping on all
  // keys within $element, since that requires traversal of all element
  // properties.
  $variables['items'] = [];
  $delta = 0;
  while (!empty($element[$delta])) {
    $variables['items'][$delta]['content'] = $element[$delta];

    // Modules (e.g., rdf.module) can add field item attributes (to
    // $item->_attributes) within hook_entity_prepare_view(). Some field
    // formatters move those attributes into some nested formatter-specific
    // element in order have them rendered on the desired HTML element (e.g., on
    // the <a> element of a field item being rendered as a link). Other field
    // formatters leave them within $element['#items'][$delta]['_attributes'] to
    // be rendered on the item wrappers provided by field.html.twig.
    $variables['items'][$delta]['attributes'] = !empty($element['#items'][$delta]->_attributes) ? new Attribute($element['#items'][$delta]->_attributes) : clone $default_attributes;
    $delta++;
  }

//  kint($variables);
}
